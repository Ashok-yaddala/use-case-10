name: Build and Deploy Microservices

on:
  push:
    branches: [main]
    paths: ['application/**']
  pull_request:
    branches: [main]
    paths: ['application/**']
  workflow_dispatch:

permissions:
  id-token: write
  contents: write     
  pull-requests: write

env:
  AWS_REGION: us-east-1
  AWS_ROLE_ARN: arn:aws:iam::136102212278:role/Githubactions-OIDC
  ECS_CLUSTER_NAME: healthcare-app-dev-cluster

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      patient-service: ${{ steps.changes.outputs.patient-service }}
      appointment-service: ${{ steps.changes.outputs.appointment-service }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Detect Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            patient-service:
              - 'application/patient-service/**'
            appointment-service:
              - 'application/appointment-service/**'

  build-patient-service:
    name: Build Patient Service
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.patient-service == 'true'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR Repository Exists
        run: |
          aws ecr describe-repositories --repository-names healthcare-app-dev-patient-service || \
          aws ecr create-repository --repository-name healthcare-app-dev-patient-service

      - name: Build, tag, and push image
        working-directory: application/patient-service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: healthcare-app-dev-patient-service
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-appointment-service:
    name: Build Appointment Service
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.appointment-service == 'true'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR Repository Exists
        run: |
          aws ecr describe-repositories --repository-names healthcare-app-dev-appointment-service || \
          aws ecr create-repository --repository-name healthcare-app-dev-appointment-service

      - name: Build, tag, and push image
        working-directory: application/appointment-service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: healthcare-app-dev-appointment-service
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
   name: Deploy to ECS
   runs-on: ubuntu-latest
   needs: [build-patient-service, build-appointment-service]
   if: always() && (needs.build-patient-service.result == 'success' || needs.build-appointment-service.result == 'success') && github.ref == 'refs/heads/main'
   environment:
     name: production
   steps:
     - name: Configure AWS credentials using OIDC
       uses: aws-actions/configure-aws-credentials@v4
       with:
         role-to-assume: ${{ env.AWS_ROLE_ARN }}
         aws-region: ${{ env.AWS_REGION }}
     - name: Ensure ECS Cluster Exists
       run: |
         if ! aws ecs describe-clusters --clusters $ECS_CLUSTER_NAME --region $AWS_REGION | grep -q '"status": "ACTIVE"'; then
           echo "ECS cluster not found. Creating ECS cluster: $ECS_CLUSTER_NAME"
           aws ecs create-cluster --cluster-name $ECS_CLUSTER_NAME --region $AWS_REGION
         else
           echo "ECS cluster exists: $ECS_CLUSTER_NAME"
         fi
     - name: Update Patient Service (if exists)
       if: needs.build-patient-service.result == 'success'
       run: |
         if aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services healthcare-app-dev-patient-service --region $AWS_REGION | grep '"status": "ACTIVE"' > /dev/null; then
           aws ecs update-service \
             --cluster $ECS_CLUSTER_NAME \
             --service healthcare-app-dev-patient-service \
             --force-new-deployment \
             --region $AWS_REGION
         else
           echo "Patient ECS service not found. Skipping update."
         fi
     - name: Update Appointment Service (if exists)
       if: needs.build-appointment-service.result == 'success'
       run: |
         if aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services healthcare-app-dev-appointment-service --region $AWS_REGION | grep '"status": "ACTIVE"' > /dev/null; then
           aws ecs update-service \
             --cluster $ECS_CLUSTER_NAME \
             --service healthcare-app-dev-appointment-service \
             --force-new-deployment \
             --region $AWS_REGION
         else
           echo "Appointment ECS service not found. Skipping update."
         fi
     - name: Wait for services to stabilize (if found)
       run: |
         if aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services healthcare-app-dev-patient-service --region $AWS_REGION | grep '"status": "ACTIVE"' > /dev/null; then
           aws ecs wait services-stable \
             --cluster $ECS_CLUSTER_NAME \
             --services healthcare-app-dev-patient-service \
             --region $AWS_REGION
         fi
         if aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services healthcare-app-dev-appointment-service --region $AWS_REGION | grep '"status": "ACTIVE"' > /dev/null; then
           aws ecs wait services-stable \
             --cluster $ECS_CLUSTER_NAME \
             --services healthcare-app-dev-appointment-service \
             --region $AWS_REGION
         fi
